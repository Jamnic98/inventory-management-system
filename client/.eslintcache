[{"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\index.js":"1","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\App.js":"2","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\expiring-soon-panel.js":"3","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\low-stock-panel.js":"4","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\page-header.js":"5","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\main-table.js":"6","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\settings-modal.js":"7","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\settings-tabs.js":"8","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\simple-modal.js":"9","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\remove-item-modal.js":"10","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\tree.js":"11","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\email-modal.js":"12","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\add-items-modal.js":"13","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\delete-item-modal.js":"14","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\add-new-item-modal.js":"15","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\edit-item-modal.js":"16","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\email-tab.js":"17","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\room-location-tab.js":"18","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\room-location-tree.js":"19"},{"size":151,"mtime":1616354322990,"results":"20","hashOfConfig":"21"},{"size":12706,"mtime":1617454160993,"results":"22","hashOfConfig":"21"},{"size":5444,"mtime":1617454161001,"results":"23","hashOfConfig":"21"},{"size":1895,"mtime":1617454161001,"results":"24","hashOfConfig":"21"},{"size":1594,"mtime":1615890494657,"results":"25","hashOfConfig":"21"},{"size":11690,"mtime":1617454161001,"results":"26","hashOfConfig":"21"},{"size":764,"mtime":1617454161016,"results":"27","hashOfConfig":"21"},{"size":2489,"mtime":1617454161016,"results":"28","hashOfConfig":"21"},{"size":1688,"mtime":1617454161016,"results":"29","hashOfConfig":"21"},{"size":4505,"mtime":1617454161001,"results":"30","hashOfConfig":"21"},{"size":1910,"mtime":1617454161016,"results":"31","hashOfConfig":"21"},{"size":3106,"mtime":1617454160999,"results":"32","hashOfConfig":"21"},{"size":4137,"mtime":1617454160994,"results":"33","hashOfConfig":"21"},{"size":3203,"mtime":1617454160997,"results":"34","hashOfConfig":"21"},{"size":8258,"mtime":1617454160995,"results":"35","hashOfConfig":"21"},{"size":8043,"mtime":1617454160998,"results":"36","hashOfConfig":"21"},{"size":3741,"mtime":1617454161000,"results":"37","hashOfConfig":"21"},{"size":5528,"mtime":1617454161001,"results":"38","hashOfConfig":"21"},{"size":4613,"mtime":1617454161001,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"p4asvj",{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\index.js",[],["87","88"],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\App.js",["89","90","91","92","93","94","95","96"],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\expiring-soon-panel.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\low-stock-panel.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\page-header.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\main-table.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\settings-modal.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\settings-tabs.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\simple-modal.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\remove-item-modal.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\tree.js",["97","98"],"import { uniqueId } from 'lodash';\r\n\r\nexport default class Tree {\r\n  constructor(root) {\r\n    this._root = root || null;\r\n  }\r\n\r\n  _traverse(callback) {\r\n    function goThrough(node) {\r\n      callback(node);\r\n      node.children.forEach((child) => {\r\n        goThrough(child);\r\n      });\r\n    }\r\n    goThrough(this._root);\r\n  }\r\n\r\n  _addNode(id, label, layer, isOpen, isSelected, editing, parent) {\r\n    const newNode = {\r\n      id: id,\r\n      layer: layer,\r\n      isOpen: isOpen,\r\n      isSelected: isSelected,\r\n      editing: editing,\r\n      children: [],\r\n      label: label,\r\n      parent: parent,\r\n    };\r\n\r\n    if (this._root === null) {\r\n      this._root = newNode;\r\n      return;\r\n    }\r\n\r\n    this._traverse((node) => {\r\n      if (node.label === parent && node.label !== label) {\r\n        node.children.push(newNode);\r\n      }\r\n    });\r\n  }\r\n\r\n  _removeNode(label, parent) {\r\n    this._traverse((node) => {\r\n      node.children.forEach((childNode, index) => {\r\n        if (childNode.label === label && childNode.parent === parent) {\r\n          node.children.splice(index, 1);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _search(label) {\r\n    let returnNode = 'Not Found';\r\n    this._traverse((node) => {\r\n      if (node.label === label) {\r\n        returnNode = node;\r\n      }\r\n    });\r\n    return returnNode;\r\n  }\r\n\r\n  _displayLeafs(parentValue) {\r\n    const parentNode =\r\n      typeof parentValue === 'string' ? this._search(parentValue) : parentValue;\r\n    let leafsRet = [];\r\n    if (parentValue.children && !parentValue.children.length) {\r\n      return parentValue;\r\n    }\r\n\r\n    parentNode.children.forEach((child) => {\r\n      leafsRet.push(this._displayLeafs(child));\r\n    });\r\n\r\n    return leafsRet.flat();\r\n  }\r\n}\r\n\r\nclass Node {\r\n  constructor(label, open, editing, children) {\r\n    this.label = label;\r\n    this.open = open;\r\n    this.editing = editing;\r\n    this.children = children;\r\n  }\r\n}\r\n","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\email-modal.js",["99"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SimpleModal from './simple-modal.js';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  modalContentContainer: {\r\n    maxHeight: '60vh',\r\n    overflow: 'auto',\r\n  },\r\n  bottom: {\r\n    margin: '.8em',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n}));\r\n\r\nfunction EmailModal(props) {\r\n  const { closeEmailModal, isOpen, emails, sendEmails, lowStockItems } = props;\r\n  const modalStyle = { minWidth: '300px' };\r\n  const classes = useStyles();\r\n\r\n  const [emailList, setEmailList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const modalList = emails.map((email) => {\r\n      return { isSelected: false, ...email };\r\n    });\r\n    setEmailList(modalList);\r\n  }, [emails]);\r\n\r\n  const handleConfirmButton = () => {\r\n    const message = lowStockItems\r\n      .map((item) => {\r\n        return item.name;\r\n      })\r\n      .join(', ');\r\n    const addressList = emailList.map((email) => {\r\n      if (email.isSelected) {\r\n        return email.address;\r\n      }\r\n    });\r\n    sendEmails(addressList, message);\r\n    closeEmailModal();\r\n  };\r\n\r\n  const handleItemClick = (emailId) => {\r\n    const updatedEmailList = emailList.map((email) => {\r\n      if (emailId === email._id) {\r\n        email.isSelected = !email.isSelected;\r\n        return email;\r\n      } else {\r\n        return email;\r\n      }\r\n    });\r\n    setEmailList(updatedEmailList);\r\n  };\r\n\r\n  return (\r\n    <SimpleModal\r\n      style={modalStyle}\r\n      closeModal={closeEmailModal}\r\n      isOpen={isOpen}\r\n      title='Send Email Alert'\r\n    >\r\n      <Box m={2}>\r\n        <List>\r\n          <Divider />\r\n          {emailList.map((email) => {\r\n            return (\r\n              <>\r\n                <ListItem>\r\n                  <ListItemIcon>\r\n                    <Checkbox\r\n                      onClick={() => handleItemClick(email._id)}\r\n                      edge='start'\r\n                      checked={email.isSelected}\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      inputProps={{ 'aria-labelledby': email._id }}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={email.name} />\r\n                </ListItem>\r\n                <Divider />\r\n              </>\r\n            );\r\n          })}\r\n        </List>\r\n      </Box>\r\n      <div className={classes.bottom}>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          onClick={handleConfirmButton}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </div>\r\n    </SimpleModal>\r\n  );\r\n}\r\n\r\nexport default EmailModal;\r\n","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\add-items-modal.js",[],"C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\delete-item-modal.js",["100","101"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SimpleModal from './simple-modal.js';\r\nimport List from '@material-ui/core/List';\r\nimport Button from '@material-ui/core/Button';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ArrowRightOutlinedIcon from '@material-ui/icons/ArrowRightOutlined';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  modalContentContainer: {\r\n    maxHeight: '60vh',\r\n    overflow: 'auto',\r\n  },\r\n  bottom: {\r\n    margin: '.8em',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n}));\r\n\r\nexport default function DeleteItemModal(props) {\r\n  const {\r\n    isOpen,\r\n    closeDeleteItemModal,\r\n    itemsToDelete,\r\n    deleteItemById,\r\n    setItemsToModify,\r\n    allItems,\r\n    setAllItems,\r\n  } = props;\r\n  const classes = useStyles();\r\n\r\n  const modalStyle = {\r\n    minWidth: '85%',\r\n  };\r\n\r\n  const [modalList, setModalList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const list = itemsToDelete.map((item) => {\r\n      const selected = item.selected || 1;\r\n      return { selected: selected, ...item };\r\n    });\r\n    setModalList(list);\r\n  }, [itemsToDelete]);\r\n\r\n  const handleAddButton = (itemID) => {\r\n    const updatedList = modalList.map((listItem) => {\r\n      if (listItem._id === itemID) {\r\n        listItem.selected += 1;\r\n      }\r\n      return listItem;\r\n    });\r\n    setModalList(updatedList);\r\n  };\r\n\r\n  const handleRemoveButton = (itemID) => {\r\n    const updatedList = modalList.map((listItem) => {\r\n      if (listItem._id === itemID) {\r\n        listItem.selected -= 1;\r\n      }\r\n      return listItem;\r\n    });\r\n    setModalList(updatedList);\r\n  };\r\n\r\n  const handleConfirmButton = () => {\r\n    let modifiedItems = [...allItems];\r\n    modalList.forEach((listItem) => {\r\n      const { _id } = listItem;\r\n      deleteItemById(_id);\r\n      modifiedItems = modifiedItems.filter((item) => {\r\n        return item._id !== listItem._id;\r\n      });\r\n    });\r\n    setItemsToModify([]);\r\n    setAllItems(modifiedItems);\r\n    closeDeleteItemModal();\r\n  };\r\n\r\n  return (\r\n    <SimpleModal\r\n      title='Delete Items'\r\n      isOpen={isOpen}\r\n      closeModal={closeDeleteItemModal}\r\n      style={modalStyle}\r\n    >\r\n      <Divider />\r\n      <List className={classes.modalContentContainer}>\r\n        {modalList.map((item, index) => {\r\n          return (\r\n            <div key={item._id}>\r\n              <ListItem>\r\n                <ArrowRightOutlinedIcon fontSize='default' />\r\n                <ListItemText\r\n                  primary={item.name}\r\n                  secondary={`${item.room} ${item.location}`}\r\n                />\r\n              </ListItem>\r\n              {index !== itemsToDelete.length - 1 ? <Divider /> : null}\r\n            </div>\r\n          );\r\n        })}\r\n      </List>\r\n      <Divider />\r\n      <div className={classes.bottom}>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          onClick={handleConfirmButton}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </div>\r\n    </SimpleModal>\r\n  );\r\n}\r\n","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\add-new-item-modal.js",["102","103","104","105","106"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SimpleModal from './simple-modal.js';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  modalContentContainer: {\r\n    maxHeight: '60vh',\r\n    overflow: 'auto',\r\n  },\r\n  bottom: {\r\n    margin: '.8em',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  name: {\r\n    width: '80%',\r\n  },\r\n  number: {\r\n    width: '20%',\r\n  },\r\n  dropDown: {\r\n    minWidth: '100%',\r\n  },\r\n}));\r\n\r\nexport default function AddNewItemModal(props) {\r\n  const {\r\n    tree,\r\n    isOpen,\r\n    closeModal,\r\n    itemsToModify,\r\n    setItemsToModify,\r\n    addItem,\r\n    allItems,\r\n    setAllItems,\r\n    setAlert,\r\n  } = props;\r\n\r\n  const modalStyle = {};\r\n\r\n  const classes = useStyles();\r\n  const [itemToAdd, setItemToAdd] = useState({\r\n    name: '',\r\n    quantity: 0,\r\n    room: '',\r\n    location: '',\r\n    expirationDate: new Date(0),\r\n    lowStockAlert: false,\r\n  });\r\n\r\n  const [checked, setChecked] = useState(false);\r\n  const [rooms, setRooms] = useState([]);\r\n  const [locations, setLocations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setLocations(getLocations(itemToAdd.room));\r\n    setRooms(getRooms());\r\n  }, [itemToAdd]);\r\n\r\n  const getRooms = () => {\r\n    let rooms = [];\r\n    tree._traverse((node) => {\r\n      if (node.layer === 1) {\r\n        rooms = [node.label, ...rooms];\r\n      }\r\n    });\r\n    return rooms;\r\n  };\r\n\r\n  const getLocations = (room) => {\r\n    let locations = [];\r\n    if (itemToAdd) {\r\n      tree._traverse((node) => {\r\n        if (node.layer === 2 && node.parent === room) {\r\n          locations = [node.label, ...locations];\r\n        }\r\n      });\r\n    }\r\n    return locations;\r\n  };\r\n\r\n  const handleConfirmButton = () => {\r\n    if (allFieldsCompleted()) {\r\n      addItem(itemToAdd);\r\n      setItemsToModify([]);\r\n      closeModal();\r\n    } else {\r\n      setAlert({ message: 'All fields must be', type: 'error' });\r\n    }\r\n  };\r\n\r\n  const allFieldsCompleted = () => {\r\n    for (const field of Object.values(itemToAdd)) {\r\n      if (field === '') {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    switch (e.target.id) {\r\n      case 'name':\r\n        const name = e.target.value;\r\n        changeName(name);\r\n        break;\r\n      case 'lowStockAlert':\r\n        toggleLowStockAlert();\r\n        break;\r\n      case 'quantity':\r\n        const quantity = e.target.value;\r\n        changeQuantity(quantity);\r\n        break;\r\n      case 'expires':\r\n        setChecked(!checked);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleRoomChange = (e) => {\r\n    const room = e.target.value;\r\n    if (isLocationInRoom(room)) {\r\n      const updatedItem = {\r\n        ...itemToAdd,\r\n        room: room,\r\n      };\r\n      setItemToAdd(updatedItem);\r\n    } else {\r\n      const updatedItem = {\r\n        ...itemToAdd,\r\n        room: room,\r\n        location: getLocations(room)[0],\r\n      };\r\n      setItemToAdd(updatedItem);\r\n    }\r\n  };\r\n\r\n  const isLocationInRoom = (room) => {\r\n    const { location } = itemToAdd;\r\n    let locations = [];\r\n    tree._traverse((node) => {\r\n      if (node.layer === 2 && node.parent === room) {\r\n        locations = [...locations, node.label];\r\n      }\r\n    });\r\n    return locations.indexOf(location) !== -1;\r\n  };\r\n\r\n  const handleLocationChange = (e) => {\r\n    const location = e.target.value;\r\n    const updatedItem = {\r\n      ...itemToAdd,\r\n      location: location,\r\n    };\r\n    setItemToAdd(updatedItem);\r\n  };\r\n\r\n  const toggleLowStockAlert = () => {\r\n    const updatedItem = {\r\n      ...itemToAdd,\r\n      lowStockAlert: !itemToAdd.lowStockAlert,\r\n    };\r\n    setItemToAdd(updatedItem);\r\n  };\r\n\r\n  const changeName = (name) => {\r\n    const updatedItem = { ...itemToAdd, name: name };\r\n    setItemToAdd(updatedItem);\r\n  };\r\n\r\n  const changeQuantity = (quantity) => {\r\n    if (quantity > -1) {\r\n      const updatedItem = {\r\n        ...itemToAdd,\r\n        quantity: quantity,\r\n      };\r\n      setItemToAdd(updatedItem);\r\n    }\r\n  };\r\n\r\n  const setOutput = () => {\r\n    if (itemToAdd) {\r\n      const {\r\n        name,\r\n        quantity,\r\n        room,\r\n        location,\r\n        expirationDate,\r\n        lowStockAlert,\r\n      } = itemToAdd;\r\n      return (\r\n        <SimpleModal\r\n          title='Add New Item'\r\n          isOpen={isOpen}\r\n          closeModal={closeModal}\r\n          style={modalStyle}\r\n        >\r\n          <Divider />\r\n          <Box m={2}>\r\n            <TextField\r\n              id='name'\r\n              label='Item:'\r\n              value={name}\r\n              variant='outlined'\r\n              margin='dense'\r\n              onChange={(e) => handleChange(e)}\r\n              className={classes.name}\r\n            />\r\n            <TextField\r\n              id='quantity'\r\n              label='Quantity:'\r\n              type='number'\r\n              value={quantity}\r\n              onChange={(e) => handleChange(e)}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              variant='outlined'\r\n              margin='dense'\r\n              className={classes.number}\r\n            />\r\n            <br />\r\n            <TextField\r\n              select\r\n              id='room'\r\n              label='Room:'\r\n              value={room}\r\n              variant='outlined'\r\n              margin='dense'\r\n              className={classes.dropDown}\r\n              onChange={(e) => handleRoomChange(e)}\r\n            >\r\n              {rooms.map((option, index) => (\r\n                <MenuItem id={index} key={index} value={option}>\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n            <br />\r\n            <TextField\r\n              select\r\n              id='location'\r\n              label='Location:'\r\n              value={location}\r\n              variant='outlined'\r\n              margin='dense'\r\n              className={classes.dropDown}\r\n              onChange={(e) => handleLocationChange(e)}\r\n              disabled={itemToAdd.room === ''}\r\n            >\r\n              {locations.map((option, index) => (\r\n                <MenuItem key={index} value={option}>\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  color='secondary'\r\n                  id='expires'\r\n                  checked={checked}\r\n                  onChange={(e) => handleChange(e)}\r\n                />\r\n              }\r\n              label='Expiration date'\r\n              labelPlacement='top'\r\n            />\r\n            <TextField\r\n              id='expirationDate'\r\n              label='Exp. date:'\r\n              type='date'\r\n              defaultValue={new Date(expirationDate).toISOString().slice(0, 10)}\r\n              className={classes.textField}\r\n              onChange={(e) => handleChange(e)}\r\n              disabled={!checked}\r\n            />\r\n            <br />\r\n            <FormControlLabel\r\n              className={classes.lowStockAlert}\r\n              control={\r\n                <Switch\r\n                  id='lowStockAlert'\r\n                  checked={lowStockAlert}\r\n                  onChange={(e) => handleChange(e)}\r\n                />\r\n              }\r\n              label='Low Stock Alert'\r\n              labelPlacement='start'\r\n            />\r\n          </Box>\r\n          <Divider />\r\n          <div className={classes.bottom}>\r\n            <Button\r\n              variant='contained'\r\n              color='primary'\r\n              onClick={handleConfirmButton}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </SimpleModal>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return setOutput();\r\n}\r\n","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\edit-item-modal.js",["107","108","109"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SimpleModal from './simple-modal.js';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {\r\n  TextField,\r\n  FormControlLabel,\r\n  Switch,\r\n  Checkbox,\r\n  MenuItem,\r\n  Box,\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  modalContentContainer: {\r\n    maxHeight: '60vh',\r\n    overflow: 'auto',\r\n  },\r\n  bottom: {\r\n    margin: '.8em',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  name: {\r\n    width: '80%',\r\n  },\r\n  number: {\r\n    width: '20%',\r\n  },\r\n  dropDown: {\r\n    minWidth: '100%',\r\n  },\r\n}));\r\n\r\nexport default function EditItemModal(props) {\r\n  const {\r\n    tree,\r\n    isOpen,\r\n    closeEditItemModal,\r\n    itemsToModify,\r\n    setItemsToModify,\r\n    updateItemById,\r\n    allItems,\r\n    setAllItems,\r\n  } = props;\r\n\r\n  const modalStyle = {};\r\n\r\n  const classes = useStyles();\r\n  const [itemToEdit, setItemToEdit] = useState(null);\r\n  const [checked, setChecked] = useState();\r\n  const [rooms, setRooms] = useState([]);\r\n  const [locations, setLocations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setItemToEdit({ ...itemsToModify[0] });\r\n    setChecked(parseInt(Date.parse(itemsToModify[0].expirationDate)) === 0);\r\n    setRooms(getRooms());\r\n  }, [itemsToModify]);\r\n\r\n  useEffect(() => {\r\n    if (itemToEdit) {\r\n      setLocations(getLocations(itemToEdit.room));\r\n    }\r\n  }, [itemToEdit]);\r\n\r\n  const getRooms = () => {\r\n    let rooms = [];\r\n    tree._traverse((node) => {\r\n      if (node.layer === 1) {\r\n        rooms = [node.label, ...rooms];\r\n      }\r\n    });\r\n    return rooms;\r\n  };\r\n\r\n  const getLocations = (room) => {\r\n    let locations = [];\r\n    if (itemToEdit) {\r\n      tree._traverse((node) => {\r\n        if (node.layer === 2 && node.parent === room) {\r\n          locations = [node.label, ...locations];\r\n        }\r\n      });\r\n    }\r\n    return locations;\r\n  };\r\n\r\n  const handleConfirmButton = () => {\r\n    const { _id } = itemToEdit;\r\n    const updatedItems = allItems.map((item) => {\r\n      if (item._id === _id) {\r\n        return itemToEdit;\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    setAllItems(updatedItems);\r\n    updateItemById(itemToEdit);\r\n    setItemsToModify([]);\r\n    closeEditItemModal();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    switch (e.target.id) {\r\n      case 'name':\r\n        const name = e.target.value;\r\n        changeName(name);\r\n        break;\r\n      case 'lowStockAlert':\r\n        toggleLowStockAlert();\r\n        break;\r\n      case 'quantity':\r\n        const quantity = e.target.value;\r\n        changeQuantity(quantity);\r\n        break;\r\n      case 'expires':\r\n        setChecked(!checked);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleRoomChange = (e) => {\r\n    const room = e.target.value;\r\n    if (isLocationInRoom(room)) {\r\n      const updatedItem = {\r\n        ...itemToEdit,\r\n        room: room,\r\n      };\r\n      setItemToEdit(updatedItem);\r\n    } else {\r\n      const updatedItem = {\r\n        ...itemToEdit,\r\n        room: room,\r\n        location: getLocations(room)[0],\r\n      };\r\n      setItemToEdit(updatedItem);\r\n    }\r\n  };\r\n\r\n  const isLocationInRoom = (room) => {\r\n    const { location } = itemToEdit;\r\n    let locations = [];\r\n    tree._traverse((node) => {\r\n      if (node.layer === 2 && node.parent === room) {\r\n        locations = [...locations, node.label];\r\n      }\r\n    });\r\n    return locations.indexOf(location) !== -1;\r\n  };\r\n\r\n  const handleLocationChange = (e) => {\r\n    const location = e.target.value;\r\n    const updatedItem = {\r\n      ...itemToEdit,\r\n      location: location,\r\n    };\r\n    setItemToEdit(updatedItem);\r\n  };\r\n\r\n  const toggleLowStockAlert = () => {\r\n    const updatedItem = {\r\n      ...itemToEdit,\r\n      lowStockAlert: !itemToEdit.lowStockAlert,\r\n    };\r\n    setItemToEdit(updatedItem);\r\n  };\r\n\r\n  const changeName = (name) => {\r\n    const updatedItem = { ...itemToEdit, name: name };\r\n    setItemToEdit(updatedItem);\r\n  };\r\n\r\n  const changeQuantity = (quantity) => {\r\n    if (quantity > -1) {\r\n      const updatedItem = {\r\n        ...itemToEdit,\r\n        quantity: quantity,\r\n      };\r\n      setItemToEdit(updatedItem);\r\n    }\r\n  };\r\n\r\n  const setOutput = () => {\r\n    if (itemToEdit) {\r\n      const {\r\n        name,\r\n        quantity,\r\n        room,\r\n        location,\r\n        expirationDate,\r\n        lowStockAlert,\r\n      } = itemToEdit;\r\n      return (\r\n        <SimpleModal\r\n          title='Edit Item'\r\n          isOpen={isOpen}\r\n          closeModal={closeEditItemModal}\r\n          style={modalStyle}\r\n        >\r\n          <Divider />\r\n          <Box m={2}>\r\n            <TextField\r\n              id='name'\r\n              label='Item:'\r\n              value={name}\r\n              variant='outlined'\r\n              margin='dense'\r\n              onChange={(e) => handleChange(e)}\r\n              className={classes.name}\r\n            />\r\n\r\n            <TextField\r\n              id='quantity'\r\n              label='Quantity:'\r\n              type='number'\r\n              value={quantity}\r\n              onChange={(e) => handleChange(e)}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              variant='outlined'\r\n              margin='dense'\r\n              className={classes.number}\r\n            />\r\n            <br />\r\n            <TextField\r\n              select\r\n              id='room'\r\n              label='Room:'\r\n              value={room}\r\n              variant='outlined'\r\n              margin='dense'\r\n              className={classes.dropDown}\r\n              onChange={(e) => handleRoomChange(e)}\r\n            >\r\n              {rooms.map((option, index) => (\r\n                <MenuItem id={index} key={index} value={option}>\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n            <br />\r\n            <TextField\r\n              select\r\n              id='location'\r\n              label='Location:'\r\n              value={location}\r\n              variant='outlined'\r\n              margin='dense'\r\n              className={classes.dropDown}\r\n              onChange={(e) => handleLocationChange(e)}\r\n            >\r\n              {locations.map((option, index) => (\r\n                <MenuItem key={index} value={option}>\r\n                  {option}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n            <br />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  color='secondary'\r\n                  id='expires'\r\n                  checked={!checked}\r\n                  onChange={(e) => handleChange(e)}\r\n                />\r\n              }\r\n              label='Expiration date'\r\n              labelPlacement='top'\r\n            />\r\n            <TextField\r\n              id='expirationDate'\r\n              label='Exp. date:'\r\n              type='date'\r\n              defaultValue={new Date(expirationDate).toISOString().slice(0, 10)}\r\n              className={classes.textField}\r\n              onChange={(e) => handleChange(e)}\r\n              disabled={checked}\r\n            />\r\n            <br />\r\n            <FormControlLabel\r\n              className={classes.lowStockAlert}\r\n              control={\r\n                <Switch\r\n                  id='lowStockAlert'\r\n                  checked={lowStockAlert}\r\n                  onChange={(e) => handleChange(e)}\r\n                />\r\n              }\r\n              label='Low Stock Alert'\r\n              labelPlacement='start'\r\n            />\r\n          </Box>\r\n          <Divider />\r\n          <div className={classes.bottom}>\r\n            <Button\r\n              variant='contained'\r\n              color='primary'\r\n              onClick={handleConfirmButton}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </SimpleModal>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return setOutput();\r\n}\r\n","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\email-tab.js",["110","111"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ArrowRightOutlinedIcon from '@material-ui/icons/ArrowRightOutlined';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    height: '100%',\r\n    width: '100%',\r\n  },\r\n  list: { overflow: 'auto', maxHeight: '200px' },\r\n}));\r\n\r\nexport default function EmailTab() {\r\n  const classes = useStyles();\r\n\r\n  const [emails, setEmails] = useState([\r\n    { name: 'jamie', address: 'test@gmail.com' },\r\n    { name: 'nicole', address: 'test@gmail.com' },\r\n  ]);\r\n  const [name, setName] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleDelete = (e, index) => {\r\n    let updatedEmails = [];\r\n    emails.map((email, i) => {\r\n      if (index !== i) {\r\n        updatedEmails.push(email);\r\n      }\r\n    });\r\n    setEmails(updatedEmails);\r\n  };\r\n\r\n  const handleNameChange = (e) => {\r\n    const name = e.target.value;\r\n    setName(name);\r\n    setError(false);\r\n  };\r\n\r\n  const handleAddressChange = (e) => {\r\n    const address = e.target.value;\r\n    setAddress(address);\r\n    setError(false);\r\n  };\r\n\r\n  const handleAddButton = () => {\r\n    setError(true);\r\n    if (name && address) {\r\n      setEmails([...emails, { name, address }]);\r\n\r\n      setError(false);\r\n      setName('');\r\n      setAddress('');\r\n    }\r\n  };\r\n\r\n  const setOutput = () => {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Button onClick={handleAddButton} color='primary' variant='outlined'>\r\n          <AddIcon />\r\n          Add new email\r\n        </Button>\r\n\r\n        <TextField\r\n          helperText={error ? 'Enter name' : ''}\r\n          error={error && name.length === 0}\r\n          value={name}\r\n          label='Name:'\r\n          margin='dense'\r\n          variant='outlined'\r\n          fullWidth\r\n          required\r\n          onChange={(e) => handleNameChange(e)}\r\n        />\r\n        <TextField\r\n          helperText={error ? 'Enter address' : ''}\r\n          error={error && address.length === 0}\r\n          value={address}\r\n          label='Email address:'\r\n          margin='dense'\r\n          variant='outlined'\r\n          fullWidth\r\n          required\r\n          onChange={(e) => handleAddressChange(e)}\r\n        />\r\n        <Box my={1}>\r\n          <List className={classes.list}>\r\n            {emails.map((email, index) => {\r\n              return (\r\n                <ListItem>\r\n                  <ArrowRightOutlinedIcon />\r\n                  <ListItemText\r\n                    primary={email.name}\r\n                    secondary={email.address}\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton\r\n                      onClick={(e) => handleDelete(e, index)}\r\n                      edge='end'\r\n                      aria-label='delete'\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n        </Box>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return setOutput();\r\n}\r\n","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\room-location-tab.js",["112","113"],"import React, { useState } from 'react';\r\nimport RoomLocationTree from './room-location-tree.js';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Lang, { uniqueId } from 'lodash';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  deleteButton: {\r\n    float: 'right',\r\n  },\r\n  root: {\r\n    height: '100%',\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nexport default function RoomLocationTab(props) {\r\n  const { tree, setTree } = props;\r\n  const classes = useStyles();\r\n\r\n  const handleDelete = () => {\r\n    const treeCopy = Lang.cloneDeep(tree);\r\n    treeCopy._traverse((node) => {\r\n      if (node.isSelected) {\r\n        treeCopy._removeNode(node.label, node.parent);\r\n      }\r\n    });\r\n    setTree(treeCopy);\r\n  };\r\n\r\n  const handleClick = (nodeId) => {\r\n    const treeCopy = Lang.cloneDeep(tree);\r\n    treeCopy._traverse((node) => {\r\n      node.isSelected = false;\r\n      if (node.id === nodeId) {\r\n        node.isOpen = !node.isOpen;\r\n      }\r\n    });\r\n    setTree(treeCopy);\r\n  };\r\n\r\n  const handleDoubleClick = (nodeId) => {\r\n    const treeCopy = Lang.cloneDeep(tree);\r\n    treeCopy._traverse((node) => {\r\n      node.isSelected = false;\r\n      if (node.id === nodeId) {\r\n        node.editing = true;\r\n      } else {\r\n        node.editing = false;\r\n      }\r\n    });\r\n    setTree(treeCopy);\r\n  };\r\n\r\n  const handleClickAway = (e) => {\r\n    /* const treeCopy = Lang.cloneDeep(tree);\r\n    treeCopy._traverse((node) => {\r\n      node.editing = false;\r\n      node.isSelected = false;\r\n    });\r\n    setTree(treeCopy); */\r\n  };\r\n\r\n  const handleKeyPressed = (e) => {\r\n    if (e.key === 'Enter') {\r\n      const treeCopy = Lang.cloneDeep(tree);\r\n      treeCopy._traverse((node) => (node.editing = false));\r\n      setTree(treeCopy);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e, nodeId) => {\r\n    const text = e.target.value;\r\n    const treeCopy = Lang.cloneDeep(tree);\r\n    treeCopy._traverse((node) => {\r\n      if (node.id === nodeId) {\r\n        node.label = text;\r\n      }\r\n    });\r\n    setTree(treeCopy);\r\n  };\r\n\r\n  const setSelected = (nodeId) => {\r\n    const treeCopy = Lang.cloneDeep(tree);\r\n    treeCopy._traverse((node) => {\r\n      if (node.id === nodeId) {\r\n        if (!isEditing()) {\r\n          node.isSelected = !node.isSelected;\r\n        }\r\n      } else {\r\n        node.isSelected = false;\r\n      }\r\n    });\r\n    setTree(treeCopy);\r\n  };\r\n\r\n  const isEditing = () => {\r\n    let result = false;\r\n    tree._traverse((node) => {\r\n      if (node.editing) {\r\n        result = true;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const isSelected = () => {\r\n    let output = false;\r\n    tree._traverse((node) => {\r\n      if (node.isSelected) {\r\n        output = true;\r\n      }\r\n    });\r\n    return output;\r\n  };\r\n\r\n  const disableAddChild = () => {\r\n    if (isSelected()) {\r\n      const selectedNode = getSelectedNode();\r\n      return selectedNode.layer === 2;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleAddChild = (nodeId) => {\r\n    const treeCopy = Lang.cloneDeep(tree);\r\n    if (tree._root !== null) {\r\n      const selectedNode = getSelectedNode();\r\n      const { label, parent, layer } = selectedNode;\r\n      treeCopy._traverse((node) => {\r\n        node.editing = false;\r\n        if (node.label === label && node.parent === parent) {\r\n          node.isOpen = true;\r\n        }\r\n      });\r\n      treeCopy._addNode(\r\n        uniqueId(),\r\n        'new',\r\n        layer + 1,\r\n        false,\r\n        false,\r\n        false,\r\n        label\r\n      );\r\n      setTree(treeCopy);\r\n    } else {\r\n      treeCopy._addNode(uniqueId(), 'home', 0, false, false, false, null);\r\n      setTree(treeCopy);\r\n    }\r\n  };\r\n\r\n  const getSelectedNode = () => {\r\n    let result = null;\r\n    tree._traverse((node) => {\r\n      if (node.isSelected) {\r\n        result = node;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const setOutput = () => {\r\n    if (tree._root !== null) {\r\n      const selected = isSelected();\r\n      return (\r\n        <div className={classes.root}>\r\n          <IconButton\r\n            color='primary'\r\n            disabled={disableAddChild()}\r\n            onClick={handleAddChild}\r\n          >\r\n            <PlaylistAddIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            color='primary'\r\n            disabled={!selected || tree._root.isSelected}\r\n            onClick={handleDelete}\r\n            className={classes.deleteButton}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n          <RoomLocationTree\r\n            handleClick={handleClick}\r\n            handleDoubleClick={handleDoubleClick}\r\n            handleKeyPressed={handleKeyPressed}\r\n            handleChange={handleChange}\r\n            setSelected={setSelected}\r\n            tree={tree}\r\n            setTree={setTree}\r\n            handleClickAway={(e) => handleClickAway(e)}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={classes.root}>\r\n          <IconButton color='primary' onClick={handleAddChild}>\r\n            <PlaylistAddIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            color='primary'\r\n            onClick={handleDelete}\r\n            className={classes.deleteButton}\r\n            disabled\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return setOutput();\r\n}\r\n","C:\\Users\\Jamie\\Documents\\Programming\\React Projects\\Inventory Management System\\inventory-management-system\\client\\src\\components\\room-location-tree.js",["114","115"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport './room-location-tree.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    backgroundColor: theme.palette.background.paper,\r\n    height: '300px',\r\n    overflow: 'auto',\r\n  },\r\n  textField: {\r\n    marginLeft: '0.5em',\r\n    fontSize: '1.2em',\r\n    border: 'none',\r\n    outline: 'none',\r\n    backgroundColor: 'transparent',\r\n    cursor: 'pointer',\r\n  },\r\n  dropDownButton: {\r\n    cursor: 'pointer',\r\n  },\r\n  box: {\r\n    cursor: 'pointer',\r\n  },\r\n}));\r\n\r\nexport default function RoomLocationTree(props) {\r\n  const classes = useStyles();\r\n  const {\r\n    tree,\r\n    handleClick,\r\n    handleDoubleClick,\r\n    handleKeyPressed,\r\n    handleChange,\r\n    setSelected,\r\n    handleClickAway,\r\n  } = props;\r\n\r\n  const getPadding = (layer) => {\r\n    return `${50 * layer}px`;\r\n  };\r\n\r\n  const createTree = (parentNode) => {\r\n    const {\r\n      id: nodeId,\r\n      children,\r\n      editing,\r\n      label,\r\n      layer,\r\n      isSelected,\r\n    } = parentNode;\r\n\r\n    if (children.length === 0) {\r\n      return (\r\n        <ListItem margin='dense' style={{ paddingLeft: getPadding(layer) }}>\r\n          <ClickAwayListener\r\n            mouseEvent={isSelected || editing ? 'onClick' : false}\r\n            onClickAway={() => handleClickAway()}\r\n          >\r\n            <div\r\n              className={`${classes.box} ${isSelected ? 'selected' : ''}`}\r\n              onClick={() => setSelected(nodeId)}\r\n            >\r\n              <ListItemText\r\n                onDoubleClick={() => handleDoubleClick(nodeId)}\r\n                primary={\r\n                  <input\r\n                    type='text'\r\n                    value={label}\r\n                    className={classes.textField}\r\n                    disabled={!editing}\r\n                    onChange={(e) => handleChange(e, nodeId)}\r\n                    onKeyDown={(e) => handleKeyPressed(e)}\r\n                  />\r\n                }\r\n              />\r\n            </div>\r\n          </ClickAwayListener>\r\n        </ListItem>\r\n      );\r\n    } else {\r\n      const {\r\n        id: nodeId,\r\n        layer,\r\n        label,\r\n        editing,\r\n        isOpen,\r\n        children,\r\n        isSelected,\r\n        parent,\r\n      } = parentNode;\r\n      return (\r\n        <>\r\n          <ListItem\r\n            margin='dense'\r\n            onDoubleClick={() => handleDoubleClick(nodeId)}\r\n            style={{ paddingLeft: getPadding(layer) }}\r\n          >\r\n            {isOpen ? (\r\n              <ExpandLess\r\n                fontSize='large'\r\n                className={classes.dropDownButton}\r\n                onClick={() => handleClick(nodeId)}\r\n              />\r\n            ) : (\r\n              <ExpandMore\r\n                fontSize='large'\r\n                className={classes.dropDownButton}\r\n                onClick={() => handleClick(nodeId)}\r\n              />\r\n            )}\r\n            <ClickAwayListener\r\n              mouseEvent={isSelected || editing ? 'onClick' : false}\r\n              onClickAway={() => handleClickAway()}\r\n            >\r\n              <div\r\n                className={`${classes.box} ${isSelected ? 'selected' : ''}`}\r\n                onClick={() => setSelected(nodeId)}\r\n              >\r\n                <ListItemText\r\n                  primary={\r\n                    <input\r\n                      type='text'\r\n                      value={label}\r\n                      className={classes.textField}\r\n                      disabled={!editing}\r\n                      onChange={(e) => handleChange(e, nodeId)}\r\n                      onKeyDown={(e) => handleKeyPressed(e)}\r\n                    />\r\n                  }\r\n                />\r\n              </div>\r\n            </ClickAwayListener>\r\n          </ListItem>\r\n          <Collapse in={isOpen} timeout='auto' unmountOnExit>\r\n            <List component='div' disablePadding>\r\n              {children.map((node) => createTree(node))}\r\n            </List>\r\n          </Collapse>\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component='div' disablePadding>\r\n        {createTree(tree._root)}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":130,"column":10,"nodeType":"122","messageId":"123","endLine":130,"endColumn":19},{"ruleId":"120","severity":1,"message":"124","line":154,"column":9,"nodeType":"122","messageId":"123","endLine":154,"endColumn":23},{"ruleId":"120","severity":1,"message":"125","line":155,"column":13,"nodeType":"122","messageId":"123","endLine":155,"endColumn":15},{"ruleId":"120","severity":1,"message":"126","line":155,"column":17,"nodeType":"122","messageId":"123","endLine":155,"endColumn":22},{"ruleId":"120","severity":1,"message":"127","line":161,"column":9,"nodeType":"122","messageId":"123","endLine":161,"endColumn":20},{"ruleId":"120","severity":1,"message":"125","line":162,"column":13,"nodeType":"122","messageId":"123","endLine":162,"endColumn":15},{"ruleId":"120","severity":1,"message":"126","line":162,"column":17,"nodeType":"122","messageId":"123","endLine":162,"endColumn":22},{"ruleId":"120","severity":1,"message":"128","line":203,"column":13,"nodeType":"122","messageId":"123","endLine":203,"endColumn":16},{"ruleId":"120","severity":1,"message":"129","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":18},{"ruleId":"120","severity":1,"message":"130","line":78,"column":7,"nodeType":"122","messageId":"123","endLine":78,"endColumn":11},{"ruleId":"131","severity":1,"message":"132","line":46,"column":47,"nodeType":"133","messageId":"134","endLine":46,"endColumn":49},{"ruleId":"120","severity":1,"message":"135","line":50,"column":9,"nodeType":"122","messageId":"123","endLine":50,"endColumn":24},{"ruleId":"120","severity":1,"message":"136","line":60,"column":9,"nodeType":"122","messageId":"123","endLine":60,"endColumn":27},{"ruleId":"120","severity":1,"message":"137","line":40,"column":5,"nodeType":"122","messageId":"123","endLine":40,"endColumn":18},{"ruleId":"120","severity":1,"message":"138","line":43,"column":5,"nodeType":"122","messageId":"123","endLine":43,"endColumn":13},{"ruleId":"120","severity":1,"message":"139","line":44,"column":5,"nodeType":"122","messageId":"123","endLine":44,"endColumn":16},{"ruleId":"140","severity":1,"message":"141","line":67,"column":6,"nodeType":"142","endLine":67,"endColumn":17,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":111,"column":5,"nodeType":"146","messageId":"147","endLine":126,"endColumn":6},{"ruleId":"140","severity":1,"message":"148","line":61,"column":6,"nodeType":"142","endLine":61,"endColumn":21,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"150","line":67,"column":6,"nodeType":"142","endLine":67,"endColumn":18,"suggestions":"151"},{"ruleId":"144","severity":1,"message":"145","line":108,"column":5,"nodeType":"146","messageId":"147","endLine":123,"endColumn":6},{"ruleId":"120","severity":1,"message":"152","line":8,"column":8,"nodeType":"122","messageId":"123","endLine":8,"endColumn":18},{"ruleId":"131","severity":1,"message":"153","line":37,"column":27,"nodeType":"133","messageId":"154","endLine":37,"endColumn":29},{"ruleId":"120","severity":1,"message":"155","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"156","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":15},{"ruleId":"120","severity":1,"message":"155","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"157","line":98,"column":9,"nodeType":"122","messageId":"123","endLine":98,"endColumn":15},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'locations' is assigned a value but never used.","Identifier","unusedVar","'deleteLocation' is assigned a value but never used.","'id' is assigned a value but never used.","'label' is assigned a value but never used.","'addLocation' is assigned a value but never used.","'res' is assigned a value but never used.","'uniqueId' is defined but never used.","'Node' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'handleAddButton' is assigned a value but never used.","'handleRemoveButton' is assigned a value but never used.","'itemsToModify' is assigned a value but never used.","'allItems' is assigned a value but never used.","'setAllItems' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getLocations' and 'getRooms'. Either include them or remove the dependency array.","ArrayExpression",["160"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'getRooms'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'getLocations'. Either include it or remove the dependency array.",["162"],"'Typography' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'useState' is defined but never used.","'AddIcon' is defined but never used.","'parent' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [getLocations, getRooms, itemToAdd]",{"range":"169","text":"170"},"Update the dependencies array to be: [getRooms, itemsToModify]",{"range":"171","text":"172"},"Update the dependencies array to be: [getLocations, itemToEdit]",{"range":"173","text":"174"},[1653,1664],"[getLocations, getRooms, itemToAdd]",[1393,1408],"[getRooms, itemsToModify]",[1522,1534],"[getLocations, itemToEdit]"]